define(["js/qlik","jquery","underscore","./qliksensed3treelayout-properties","./qliksensed3treelayout-initialproperties","./lib/js/extensionUtils","text!./lib/css/style.css","./lib/js/d3.v3.min"],function(qlik,$,_,props,initProps,extensionUtils,cssContent,d3){"use strict";extensionUtils.addStyleToHeader(cssContent);var selected=[],parent_id=null,my_id=null;return{definition:props,initialProperties:initProps,snapshot:{canTakeSnapshot:!0},paint:function($element,layout){function selectParentNodes(parent_id){if(parent_id>0){var parentNodes=_.where(flatten_data,{id:parent_id});_.each(parentNodes,function(d){selectParentNodes(d.parent_id),selected.push(d.elemNum)})}}function selectChildNodes(my_id){if(my_id>0){var childNodes=_.where(flatten_data,{parent_id:my_id});_.each(childNodes,function(d){selectChildNodes(d.id),selected.push(d.elemNum)})}}function collapse(d){d.children?(d._children=d.children,d.children=null):(d.children=d._children,d._children=null)}function collapseAll(d){d.children&&(d.children.forEach(collapseAll),layout.properties.defineCollapseLevel&&d.depth>=layout.properties.collapseLevel&&collapse(d))}function update(source){var nodes=tree.nodes(root).reverse(),links=tree.links(nodes);nodes.forEach(function(d){d.y=180*d.depth});var node=svg.selectAll("g.node").data(nodes,function(d){return d.id||(d.id=++i)}),nodeEnter=node.enter().append("g").attr("class","node").attr("transform",function(){return"translate("+source.y0+","+source.x0+")"});nodeEnter.append("circle").attr("r",1e-6).style("fill",function(d){return d._children?"lightsteelblue":"#fff"}).on("click",eventCollapseChild),nodeEnter.append("text").attr("x",function(d){return d.children||d._children?-10-(layout.properties.circleRadius-4)/2:10+(layout.properties.circleRadius-4)/2}).attr("dy",".35em").attr("text-anchor",function(d){return d.children||d._children?"end":"start"}).style("font-size",layout.properties.fontSize+"px").text(function(d){return layout.properties.showMeasure?d.name+": "+d.mea:d.name}).on("click",eventMakeSelection).on("mouseover",function(d){node_onMouseOver(d)}).on("mouseout",function(){toolTip.transition().duration(500).style("opacity","0")}).style("fill-opacity",1e-6);var nodeUpdate=node.transition().duration(duration).attr("transform",function(d){return"translate("+d.y+","+d.x+")"});nodeUpdate.select("circle").attr("r",layout.properties.circleRadius).style("fill",function(d){return d._children?"lightsteelblue":"#fff"}),nodeUpdate.select("text").style("fill-opacity",1);var nodeExit=node.exit().transition().duration(duration).attr("transform",function(){return"translate("+source.y+","+source.x+")"}).remove();nodeExit.select("circle").attr("r",1e-6),nodeExit.select("text").style("fill-opacity",1e-6);var link=svg.selectAll("path.link").data(links,function(d){return d.target.id});link.enter().insert("path","g").attr("class","link").attr("d",function(){var o={x:source.x0,y:source.y0};return diagonal({source:o,target:o})}),link.transition().duration(duration).attr("d",diagonal),link.exit().transition().duration(duration).attr("d",function(){var o={x:source.x,y:source.y};return diagonal({source:o,target:o})}).remove(),nodes.forEach(function(d){d.x0=d.x,d.y0=d.y})}function node_onMouseOver(d){toolTip.transition().duration(200).style("opacity",".85"),layout.properties.showMeasure?toolTipContent.html(d.name+":"+d.mea):toolTipContent.html(d.name),toolTip.style("left",d3.event.layerX+20+"px").style("top",d3.event.layerY+"px").style("left",d+"px").style("top",d+"px").style("z-index",5)}function eventCollapseChild(d){d.children?(d._children=d.children,d.children=null):(d.children=d._children,d._children=null),update(d)}function eventMakeSelection(d){selected.push(d.elemNum),"parent"==layout.properties.selectionMode?parent_id=d.parent_id:"child"==layout.properties.selectionMode&&(my_id=d.id),layout.properties.clearAll?(app.clearAll(),self.paint($element)):self.paint($element,layout)}if(layout.qHyperCube.qDimensionInfo.length<3||layout.qHyperCube.qMeasureInfo.length<1){var html_text='<h1 style="font-size: 150%;">This extension requires 3 dimensions and 1 measure to define the Tree Structure.</h1>';return html_text+="<br />Dimensions:<br /><br />",html_text+='<b style="color: #1A8C27">Node ID:</b> Numeric ID uniquely identifies each node.<br />',html_text+='<b style="color: #1A8C27">Parent ID:</b> Numeric ID of the parent node.<br />',html_text+='<b style="color: #1A8C27">Node Name:</b> Display name of each node.<br />',html_text+="<br /><br />Measure:<br /><br />",html_text+='<b style="color: #1A8C27">Measure:</b>  This is a measure value which is displayed beside each node name on the tree. You can optionally input "Sum(1)" here and switch off "Display Measure" property to hide this measure value.<br /><br />',$element.html(html_text),null}layout.properties.defineScreenSize&&extensionUtils.addStyleToHeader("<style>div.qv-object-content-container {overflow: auto;}</style>");var self=this,app=qlik.currApp(this),extension_object_id=layout.qInfo.qId,qMatrix=layout.qHyperCube.qDataPages[0].qMatrix,flatten_data=qMatrix.map(function(d){return{id:d[0].qNum,elemNum:d[0].qElemNumber,parent_id:d[1].qNum,name:d[2].qText,mea:d[3].qText}});if(selected&&selected.length>0){"parent"==layout.properties.selectionMode&&parent_id?selectParentNodes(parent_id):"child"==layout.properties.selectionMode&&my_id&&selectChildNodes(my_id);var dim=0;self.backendApi.selectValues(dim,selected,!0),selected=[],parent_id=null,self.paint($element,layout)}var node_with_lowest_id=_.min(flatten_data,function(d){return d.id}),root_node_id=node_with_lowest_id.id,returnArrayContainingAllChildNodes=function(parent_id,parent_array,depth){var child_nodes=_.where(flatten_data,{parent_id:parent_id}),child_nodes_array=[];if(depth++,child_nodes.length>0){for(var i=0;i<child_nodes.length;i++){var child_node={id:child_nodes[i].id,elemNum:child_nodes[i].elemNum,name:child_nodes[i].name,parent_id:child_nodes[i].parent_id,mea:child_nodes[i].mea,depth:depth};child_nodes_array[i]=child_node,returnArrayContainingAllChildNodes(child_nodes[i].id,child_nodes_array[i],depth)}return parent_array.children=child_nodes_array,parent_array}return parent_array},rootNode=_.findWhere(flatten_data,{id:root_node_id}),top_depth=0,hierarchical_data=returnArrayContainingAllChildNodes(root_node_id,rootNode,top_depth),$divContainer=$(document.createElement("div"));$divContainer.attr("id",extension_object_id),$divContainer.addClass("divTemplateContainer"),$element.empty(),$element.append($divContainer);var $divToolTip=$(document.createElement("div"));$divToolTip.attr("id","tooltip"),$divToolTip.css({backgroundColor:"white",color:"#000",opacity:0,position:"absolute",border:"1px solid #dbdbdb"}),$divContainer.append($divToolTip);var $divToolTipContent=$(document.createElement("div"));$divToolTipContent.attr("id","tooltipcontent"),$divToolTipContent.css({color:"#000",font:"11px sans-serif","text-align":"left",padding:"7px"}),$divToolTipContent.html("content here"),$divToolTip.append($divToolTipContent);var toolTip=d3.select("#tooltip"),toolTipContent=d3.select("#tooltipcontent"),ext_width=0,ext_height=0;layout.properties.defineScreenSize?(ext_width=layout.properties.screenWidth,ext_height=layout.properties.screenHight):(ext_width=$element.width(),ext_height=$element.height());var root,margin={top:20,right:120,bottom:20,left:120},width=ext_width-margin.right-margin.left,height=ext_height-margin.top-margin.bottom,i=0,duration=750,tree=d3.layout.tree().size([height,width]),diagonal=d3.svg.diagonal().projection(function(d){return[d.y,d.x]}),svg=d3.select("#"+extension_object_id).append("svg").attr("width",width+margin.right+margin.left).attr("height",height+margin.top+margin.bottom).append("g").attr("transform","translate("+margin.left+","+margin.top+")");root=hierarchical_data,root.x0=height/2,root.y0=0,root.children?(root.children.forEach(collapseAll),update(root)):update(root),d3.select(self.frameElement).style("height","800px")}}});